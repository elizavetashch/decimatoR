load("~/decimatorGit/decimatoR/data/coord_data.rda")
df <- coord_data
# Step 1: Identify coordinate format
df <- identify_coordinate_format(df, longitude, latitude)
identify_coordinate_format <- function(df, longitude, latitude) {
# Filter rows where longitude is not NA
df <- dplyr::filter(df, !is.na(!!rlang::sym(longitude))) # dplyr for filtering rows
df <- dplyr::filter(df, !(!!rlang::sym(longitude) %in% "NA")) # dplyr for filtering rows
# Mutate to determine coordinate format for longitude and latitude
df <- dplyr::mutate(df, # dplyr for adding new columns
long_coordinate_format = dplyr::case_when( # dplyr for conditional transformations
stringr::str_detect(!!rlang::sym(longitude), "^[\\+-]?((1[0-7]\\d|[1-9]?\\d)(\\.\\d{1,})?|180)\\D*[EWew]?$") ~ "DD", # stringr for pattern matching
stringr::str_detect(!!rlang::sym(longitude), "^[\\+-]?((1[0-7]\\d|[1-9]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|180(\\D+0)?)\\D+[EWew]?$") ~ "DDM", # stringr for pattern matching
stringr::str_detect(!!rlang::sym(longitude), "^[\\+-]?([1-7]?\\d{1,2}\\D+([0-5]?\\d|60)\\D+([0-5]?\\d|60)(\\.\\d+)?|180\\D+0\\D+0)\\D+[EWew]?$") ~ "DMS", # stringr for pattern matching
TRUE ~ NA_character_
),
lat_coordinate_format = dplyr::case_when( # dplyr for conditional transformations
stringr::str_detect(!!rlang::sym(latitude), "^[\\+-]?(([1-8]?\\d)(\\.\\d{1,})?|90)\\D*[NSns]?$") ~ "DD", # stringr for pattern matching
stringr::str_detect(!!rlang::sym(latitude), "^[\\+-]?(([1-8]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|90(\\D+0)?)\\D+[NSns]?$") ~ "DDM", # stringr for pattern matching
stringr::str_detect(!!rlang::sym(latitude), "^[\\+-]?(([1-8]?\\d)\\D+([0-5]?\\d|60)\\D+([0-5]?\\d|60)(\\.\\d+)?|90\\D+0\\D+0)\\D+[NSns]?$") ~ "DMS", # stringr for pattern matching
TRUE ~ NA_character_
)
)
# Handle DDM interval cases for longitude and latitude
df <- dplyr::mutate(df, # dplyr for adding new columns
long_coordinate_format = dplyr::if_else( # dplyr for conditional logic
is.na(long_coordinate_format),
dplyr::case_when( # dplyr for conditional transformations
stringr::str_detect(!!rlang::sym(longitude), "^[\\+-]?((1[0-7]\\d|[0-9]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|180(\\D+0)?)\\D+[EWew]?-[\\+-]?((1[0-7]\\d|[0-9]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|180(\\D+0)?)\\D+[EWew]?$") ~ "DDM interval" # stringr for pattern matching
),
long_coordinate_format
),
lat_coordinate_format = dplyr::if_else( # dplyr for conditional logic
is.na(lat_coordinate_format),
dplyr::case_when( # dplyr for conditional transformations
stringr::str_detect(!!rlang::sym(latitude), "^[\\+-]?(([1-8]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|90(\\D+0)?)\\D+[NSns]?-[\\+-]?(([1-8]?\\d)\\D+[0-6]?\\d(\\.\\d{1,})?|90(\\D+0)?)\\D+[NSns]?$") ~ "DDM interval" # stringr for pattern matching
),
lat_coordinate_format
)
)
# Convert formats to factors
df$long_coordinate_format <- as.factor(df$long_coordinate_format) # base R for factor conversion
df$lat_coordinate_format <- as.factor(df$lat_coordinate_format) # base R for factor conversion
return(df)
}
shorten_ddm_intervals_string <- function(coordinate_strings, option = "first") {
# Extract the first part of the interval
first <- stringr::str_extract(coordinate_strings, "^[^-]+")
# Extract the second part of the interval
second <- stringr::str_extract(coordinate_strings, "(?<=-).*")
# Return the selected option
result <- switch(option,
"first" = first,  # Take the first part of the interval
"second" = second,  # Take the second part of the interval
stop("Invalid option. Choose 'first' or 'second'."))
return(result)
}
replace_nondigits_string <- function(string) {
# Remove leading "-" if present
string <- stringr::str_replace(string, "^-", "") # stringr for pattern replacement
# Remove all letters
string <- stringr::str_remove_all(string, "[A-Za-z]") # stringr for removing all matching patterns
# Remove whitespaces
string <- stringr::str_replace_all(string, " ", "") # stringr for replacing whitespaces
# Replace remaining non-digit characters except for "." with ";"
new_string <- base::gsub("[^0-9\\.]", ";", string) # base R for general substitutions
# Replace ";;" with ";"
result_string <- base::gsub(";;", ";", new_string) # base R for general substitutions
return(result_string)
}
replace_nondigits_vector <- function(strings) {
new_strings <- base::lapply(strings, replace_nondigits_string)
return(new_strings)
}
extract_digits_from_string <- function(string) {
# Split the string into parts based on semicolons using base R strsplit
parts <- base::strsplit(string, ";", fixed = TRUE)[[1]]
# Extract digits and dots from each part using base R gsub
first <- base::gsub("[^0-9\\.]", "", parts[1])
second <- base::ifelse(length(parts) >= 2, base::gsub("[^0-9\\.]", "", parts[2]), 0)
third <- base::ifelse(length(parts) >= 3, base::gsub("[^0-9\\.]", "", parts[3]), 0)
# Replace NA values with 0 using base R ifelse
first <- base::ifelse(base::is.na(first), 0, first)
second <- base::ifelse(base::is.na(second), 0, second)
third <- base::ifelse(base::is.na(third), 0, third)
# Return the extracted digits as a list using base R list
return(base::list(first = first, second = second, third = third))
}
extract_direction_vector <- function(strings) {
direction_strings <- base::lapply(strings, extract_direction_string)
return(direction_strings)
}
extract_direction_string <- function(coordinate_string) {
direction_string <-  base::ifelse(stringr::str_detect(coordinate_string, "[SsWw]") | stringr::str_starts(coordinate_string, "^-"),    "-",    "+"
)
return(direction_string)
}
apply_direction_string <- function(string_decimal, string_direction) {
result <- base::ifelse(string_direction == "-", -base::abs(string_decimal), base::abs(string_decimal))
return(result)
}
apply_direction_vector <- function(string_decimal, string_direction) {
applied_string <- base::mapply(apply_direction_string, string_decimal, string_direction)
return(applied_string)
}
extract_digits_from_vector <- function(strings) {
results <- purrr::map(strings, extract_digits_from_string)
return(results)
}
df <- identify_coordinate_format(df, longitude, latitude)
df <- identify_coordinate_format(df, Longitude, Latitude)
View(df)
View(df)
View(df)
View(coord_data)
View(coord_data)
process_coordinates_to_dd <- function(df, longitude, latitude) {
# Ensure longitude and latitude are strings representing column names
longitude <- rlang::as_string(rlang::ensym(longitude))
latitude <- rlang::as_string(rlang::ensym(latitude))
# Step 1: Identify coordinate format
df <- identify_coordinate_format(df, longitude, latitude)
# Step 2: Apply `shorten_ddm_intervals_string` to longitude and latitude
df <- dplyr::mutate(
df, # NA FILTERING MISSING: SET LONG TEMP TO NA
longitude_temp = dplyr::case_when(
long_coordinate_format == "DDM interval" ~ base::sapply(df[[longitude]], shorten_ddm_intervals_string),
TRUE ~ df[[longitude]]
),
latitude_temp = dplyr::case_when(
lat_coordinate_format == "DDM interval" ~ base::sapply(df[[latitude]], shorten_ddm_intervals_string),
TRUE ~ df[[latitude]]
)
)
# Step 3: Replace non-digits in longitude and latitude
df <- dplyr::mutate(
df,
longitudecomma = base::sapply(longitude_temp, replace_nondigits_vector),
latitudecomma = base::sapply(latitude_temp, replace_nondigits_vector)
)
# Step 4: Extract digits
df <- dplyr::mutate(
df,
longitudedigits = base::sapply(longitudecomma, extract_digits_from_vector),
latitudedigits = base::sapply(latitudecomma, extract_digits_from_vector)
)
# Step 5: Unlist digit components
df <- dplyr::mutate(
df,
longitudedigits = purrr::map(longitudedigits, base::unlist),
latitudedigits = purrr::map(latitudedigits, base::unlist)
)
# Step 6: Unnest digits into separate columns
df <- tidyr::unnest_wider(df, col = c(longitudedigits, latitudedigits), names_sep = "_")
# Step 7: Convert digit columns to numeric
df <- dplyr::mutate(
df,
dplyr::across(longitudedigits_first:latitudedigits_third, as.numeric)
)
# Step 8: Calculate decimal degrees
df <- dplyr::mutate(
df,
longitude_DD = longitudedigits_first + longitudedigits_second / 60 + longitudedigits_third / 3600,
latitude_DD = latitudedigits_first + latitudedigits_second / 60 + latitudedigits_third / 3600
)
# Step 9: Extract and apply directions
df <- dplyr::mutate(
df,
longitude_direction = base::sapply(longitude_temp, extract_direction_vector),
latitude_direction = base::sapply(latitude_temp, extract_direction_vector),
longitude_decimal = base::mapply(apply_direction_vector, longitude_DD, longitude_direction),
latitude_decimal = base::mapply(apply_direction_vector, latitude_DD, latitude_direction)
)
# ENSURE THAT THE LONGITUDE_DECIMAL AND LATITUDE_DECIMAL ARE NUMERIC
#df <-  dplyr::select(df, -c(longitude_temp:latitude_direction))
return(df)
}
process_coordinates_to_dd(df)
process_coordinates_to_dd(df, Longitude, Latitude)
df_processed <- process_coordinates_to_dd(df, Longitude, Latitude)
View(df_processed)
View(df_processed)
process_coordinates_to_dd <- function(df, longitude, latitude) {
# Ensure longitude and latitude are strings representing column names
longitude <- rlang::as_string(rlang::ensym(longitude))
latitude <- rlang::as_string(rlang::ensym(latitude))
# Step 1: Identify coordinate format
df <- identify_coordinate_format(df, longitude, latitude)
# Step 2: Apply `shorten_ddm_intervals_string` to longitude and latitude
df <- dplyr::mutate(
df, # NA FILTERING MISSING: SET LONG TEMP TO NA
longitude_temp = dplyr::case_when(
long_coordinate_format == "DDM interval" ~ base::sapply(df[[longitude]], shorten_ddm_intervals_string),
TRUE ~ df[[longitude]]
),
latitude_temp = dplyr::case_when(
lat_coordinate_format == "DDM interval" ~ base::sapply(df[[latitude]], shorten_ddm_intervals_string),
TRUE ~ df[[latitude]]
)
)
# Step 3: Replace non-digits in longitude and latitude
df <- dplyr::mutate(
df,
longitudecomma = base::sapply(longitude_temp, replace_nondigits_vector),
latitudecomma = base::sapply(latitude_temp, replace_nondigits_vector)
)
# Step 4: Extract digits
df <- dplyr::mutate(
df,
longitudedigits_dict = base::sapply(longitudecomma, extract_digits_from_vector),
latitudedigits_dict = base::sapply(latitudecomma, extract_digits_from_vector)
)
# Step 5: Unlist digit components
df <- dplyr::mutate(
df,
longitudedigits = purrr::map(longitudedigits_dict, base::unlist),
latitudedigits = purrr::map(latitudedigits_dict, base::unlist)
)
# Step 6: Unnest digits into separate columns
df <- tidyr::unnest_wider(df, col = c(longitudedigits, latitudedigits), names_sep = "_")
# Step 7: Convert digit columns to numeric
df <- dplyr::mutate(
df,
dplyr::across(longitudedigits_first:latitudedigits_third, as.numeric)
)
# Step 8: Calculate decimal degrees
df <- dplyr::mutate(
df,
longitude_DD = longitudedigits_first + longitudedigits_second / 60 + longitudedigits_third / 3600,
latitude_DD = latitudedigits_first + latitudedigits_second / 60 + latitudedigits_third / 3600
)
# Step 9: Extract and apply directions
df <- dplyr::mutate(
df,
longitude_direction = base::sapply(longitude_temp, extract_direction_vector),
latitude_direction = base::sapply(latitude_temp, extract_direction_vector),
longitude_decimal = base::mapply(apply_direction_vector, longitude_DD, longitude_direction),
latitude_decimal = base::mapply(apply_direction_vector, latitude_DD, latitude_direction)
)
# ENSURE THAT THE LONGITUDE_DECIMAL AND LATITUDE_DECIMAL ARE NUMERIC
#df <-  dplyr::select(df, -c(longitude_temp:latitude_direction))
return(df)
}
View(extract_digits_from_string)
df_processed <- process_coordinates_to_dd(df, Longitude, Latitude)
View(df_processed)
structure(df_processed)
str(df_processed)
process_coordinates_to_dd <- function(df, longitude, latitude) {
# Ensure longitude and latitude are strings representing column names
longitude <- rlang::as_string(rlang::ensym(longitude))
latitude <- rlang::as_string(rlang::ensym(latitude))
# Step 1: Identify coordinate format
df <- identify_coordinate_format(df, longitude, latitude)
# Step 2: Apply `shorten_ddm_intervals_string` to longitude and latitude
df <- dplyr::mutate(
df, # NA FILTERING MISSING: SET LONG TEMP TO NA
longitude_temp = dplyr::case_when(
long_coordinate_format == "DDM interval" ~ base::sapply(df[[longitude]], shorten_ddm_intervals_string),
TRUE ~ df[[longitude]]
),
latitude_temp = dplyr::case_when(
lat_coordinate_format == "DDM interval" ~ base::sapply(df[[latitude]], shorten_ddm_intervals_string),
TRUE ~ df[[latitude]]
)
)
# Step 3: Replace non-digits in longitude and latitude
df <- dplyr::mutate(
df,
longitudecomma = base::sapply(longitude_temp, replace_nondigits_vector),
latitudecomma = base::sapply(latitude_temp, replace_nondigits_vector)
)
# Step 4: Extract digits
df <- dplyr::mutate(
df,
longitudedigits = base::sapply(longitudecomma, extract_digits_from_vector),
latitudedigits = base::sapply(latitudecomma, extract_digits_from_vector)
)
# Step 5: Unlist digit components
df <- dplyr::mutate(
df,
longitudedigits = purrr::map(longitudedigits, base::unlist),
latitudedigits = purrr::map(latitudedigits, base::unlist)
)
# Step 6: Unnest digits into separate columns
df <- tidyr::unnest_wider(df, col = c(longitudedigits, latitudedigits), names_sep = "_")
# Step 7: Convert digit columns to numeric
df <- dplyr::mutate(
df,
dplyr::across(longitudedigits_first:latitudedigits_third, as.numeric)
)
# Step 8: Calculate decimal degrees
df <- dplyr::mutate(
df,
longitude_DD = longitudedigits_first + longitudedigits_second / 60 + longitudedigits_third / 3600,
latitude_DD = latitudedigits_first + latitudedigits_second / 60 + latitudedigits_third / 3600
)
# Step 9: Extract and apply directions
df <- dplyr::mutate(
df,
longitude_direction = base::sapply(longitude_temp, extract_direction_vector),
latitude_direction = base::sapply(latitude_temp, extract_direction_vector),
longitude_decimal = base::mapply(apply_direction_vector, longitude_DD, longitude_direction),
latitude_decimal = base::mapply(apply_direction_vector, latitude_DD, latitude_direction)
)
# ENSURE THAT THE LONGITUDE_DECIMAL AND LATITUDE_DECIMAL ARE NUMERIC
#df <-  dplyr::select(df, -c(longitude_temp:latitude_direction))
return(df)
}
str(df_processed$latitudedigits_dict)
